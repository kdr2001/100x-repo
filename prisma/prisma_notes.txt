https://projects.100xdevs.com/tracks/gZf9uBBNSbBR7UCqyyqT/prisma-1

***Prisma can be used for both NoSQL and SQL types of databases.
------------------------------------------------------------------------
Migration in ORMs:

-Let's say, we have a database in AWS. 
-Before you deploy your application, make sure you run all the DB table queries.
-If you add/change something in the table related to its schema, prisma will create additional 
files for it.
-So, when you move to Azure, let's say, you just need to run those files on Azure.
-Data migration is different. Somehow, you should copy all the data. 
-But, for schema, you will have these migration files for all the changes related to schema.
------------------------------------------------------------------------
Intuitive data model:

-For the first time, developer will create schema.prisma file, only for once.
-Anytime later, just update in the data model, ORM will create another file for 
the additional details in the schema.
-Data models are the objects which will represent the schema in the db.
------------------------------------------------------------------------
1) npm init -y : to get package.json file, so that we have a note of dependencies to be downloaded
in other systems, when moved. 
2) npm install prisma typescript ts-node @types/node --save-dev
3) tsc --init : to initialise the project with tsconfig.json file.
4) npx prism --init: will create prisma/schema.prisma file.
 project creation is there in ppt.
5)npx prisma migrate dev --name UserAndTodoAdded : to migrate
6)npx prisma generate: to generate prisma client
5) npx tsc -b: to build the index.ts file
6) node dist/index.js: to run the file.
 -----------------------------------------------------------------------
 1)Add 'prisma' extension in vscode to see the highliting
 2)add your postgres url in the .env file 
 --we cannot use multiple DBMSs in prisma at the same time. 
 --DBMSes meaning different types of databases like postgres, mysql, mongodb etc.
 3)create a model 'User' and another model 'Todo'
 4)Do migration now- npx prisma migrate dev --name UserAndTodoAdded
 -This command will do 2 things actually. 1)migrate my db 2)create migration files locally
 -Migration can be done anytime.
 -mostly, people do it before committing to git.
 5) In migrations.sql file under migrations/<migaration-name>, u will find the schema.
 6)Command to generate client : npx prisma generate
 --Everytime, you change anything in schema.prisma, you have to run these 2 commands.
 one to migrate, and one to create client.
 7)Everytime, you try to insert into table, the id will be incremented. It need not be a
 correct insert, even the failed insert will increment the count. 
 
 -----------------------------------------------------------------------
 Ctrl+p : to move bw opened files in vscode
 -----------------------------------------------------------------------
 Difference between npx and npm:
 
 npx-Node package execute
 -it is used to execute packages from the npm registry without the need to install them globally
 or locally.
 -npx allows you to run commands from packages as if they were installed globally, but without 
 actually installing them globally. 
 -Instead, it temporarily installs the package for the duration of the command's execution and
then removes it.
 
 npm-node package manager
 -It is primarily used for installing, managing, and publishing packages (JavaScript libraries) for Node.js.
 ------------------------------------------------------------------------
 Autogenerated clients:
 
 Prisma needs to generate few files automatically. 
 1)create schema.prisma file
 2)Run a command to generate migrations folder.
 3)Run a command to generate client that will expose user and todo class, so that we can use those clients
 to interact with db.
 
 -Command to generate client
 npx prisma generate
 -PrismaClient is not the one, that is already there on npm registry
 -It is client created based on your prisma.schema file, to access the db tables.

 -how to import prisma client
 1)import {PrismaClient} from '@prisma/client'
 2)const prisma = new PrismaClient();
 3)prisma.user.findMany({
    id:1;
   })
 ------------------------------------------------------------------------
 
 





